name: projet-1

# Gestion de la concurrence des jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Variables d'environnement globales
env:
  SERVER_USER: "root"
  SERVER_IP: "20.47.71.43"

# Événements déclenchant le workflow
on:
  push:
    branches:
      - main

jobs:
  # Vérifications backend
  checks_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4
      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: server/package-lock.json
      - name: Installer les dépendances
        run: npm ci --prefer-offline
      - name: Exécuter les tests
        run: npm run test:ci
      - name: Vérification des vulnérabilités
        run: npm audit
      - name: Upload rapport de couverture sur Codecov
        uses: codecov/codecov-action@v3

  # Vérifications frontend
  checks_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4
      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: Installer les dépendances
        run: cd client && npm ci --prefer-offline
      - name: Vérification des vulnérabilités
        run: cd client && npm audit
      - name: Linting du code
        run: cd client && npm run lint

  # Build du frontend
  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4
      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: Installer les dépendances
        run: cd client && npm ci --prefer-offline
      - name: Build du frontend
        run: cd client && npm run build
      - name: Upload de l'artéfact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: frontend-dist
          path: client/dist/
          retention-days: 1

  # Tests end-to-end avec Cypress
  test_e2e:
    runs-on: ubuntu-latest
    needs: [build_frontend]
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4
      - name: Télécharger l'artéfact du frontend
        uses: actions/download-artifact@v3.0.2
        with:
          name: frontend-dist
          path: client/dist/
      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: server/package-lock.json
      - name: Installer les dépendances serveur
        run: |
          cd server
          npm ci --prefer-offline
      - name: Lancer le serveur backend
        run: |
          cd server
          node index.js &
      - name: Installer serveur statique
        run: npm install -g serve
      - name: Lancer serveur frontend statique
        run: serve -s client/dist -l 4173 &
      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-
      - name: Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          browser: chrome
          wait-on: http://localhost:4173
          wait-on-timeout: 60
          config: baseUrl=http://localhost:4173

  # Déploiement
  deploy:
    needs: [checks_backend, checks_frontend, build_frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4
      - name: Télécharger l'artéfact
        uses: actions/download-artifact@v3.0.2
        with:
          name: frontend-dist
          path: ./dist
      - name: Déployer sur le serveur
        run: |
          eval $(ssh-agent -s)
          ssh-add - <<< "${{secrets.AZURE_PROD_PKEY}}"
          mkdir -p ~/.ssh
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          scp -r ./dist/* $SERVER_USER@$SERVER_IP:/var/www/client
          scp -r ./server $SERVER_USER@$SERVER_IP:/var/www
          ssh $SERVER_USER@$SERVER_IP "cd /var/www/server && npm install --omit=dev"
          ssh $SERVER_USER@$SERVER_IP "cd /var/www/server && pm2 startOrRestart ecosystem.config.js --env production && pm2 save"
