name: CI/CD workflow

env:
  SERVER_USER: "root"
  SERVER_IP: "20.47.71.43"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  tests_backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: Installer les dépendances
        run: npm ci --prefer-offline

      - name: Exécuter les tests
        run: npm run test:ci

      - name: Vérification du code
        run: npm run lint

      - name: Vérification des vulnérabilités
        run: npm audit

      - name: Upload du rapport de couverture sur Codecov
        uses: codecov/codecov-action@v3
        with:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  checks_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Installer les dépendances
        run: cd client && npm ci --prefer-offline

      - name: Vérification des vulnérabilités
        run: cd client && npm audit
        continue-on-error: true

      - name: Vérification du code
        run: cd client && npm run lint

  build_frontend:
    runs-on: ubuntu-latest
    needs: [checks_frontend]
    defaults:
      run:
        working-directory: client
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Installer les dépendances
        run: npm ci --prefer-offline

      - name: Build du frontend
        run: npm run build

      - name: Archiver les artefacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: client/dist/
          retention-days: 1

  test_e2e:
    runs-on: ubuntu-latest
    needs: [checks_frontend, build_frontend]
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4

      - name: Télécharger l'artéfact du frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: client/dist/

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: Installer les dépendances serveur
        run: cd server && npm ci --prefer-offline

      - name: Lancer le serveur backend
        run: |
          cd server
          nohup node index.js &

      - name: Lancer les tests Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          browser: chrome
          start: npx serve -s dist -l 4173
          wait-on: http://localhost:4173
          wait-on-timeout: 60
          config: baseUrl=http://localhost:4173

  deploy:
    needs: [test_e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout le code
        uses: actions/checkout@v4

      - name: Télécharger l'artéfact du frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./dist

      - name: Déployer sur le serveur
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${{ secrets.AZURE_PROD_PKEY }}"
          mkdir -p ~/.ssh
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          scp -r ./dist/* $SERVER_USER@$SERVER_IP:/var/www/client
          scp -r ./server $SERVER_USER@$SERVER_IP:/var/www
          ssh $SERVER_USER@$SERVER_IP "cd /var/www/server && npm install --omit=dev"
          ssh $SERVER_USER@$SERVER_IP "cd /var/www/server && pm2 startOrRestart ecosystem.config.js --env production && pm2 save"
